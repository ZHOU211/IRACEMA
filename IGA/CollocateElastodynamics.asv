function [K, M] = CollocateElastodynamics(Model,CollocationPoints)

[sz2 ~] = size(CollocationPoints);
%Material Properties
YOUNG = 210*10^9;
RHO = 7860; 
POISSON = 0.3;
lambda = YOUNG*POISSON/((1+POISSON)*(1-2*POISSON)); % Lamé
mi = YOUNG/(2*(1+POISSON)); % G
[INN, IEN, nel, nen] = Model.get_connectivity;
 ID = reshape(1:max(max(IEN))*3,3,max(max(IEN)));
pu = Model.pu;
pv = Model.pv;
pw = Model.pw;
sz = size(Model.PX);
K = zeros(3*prod(sz));
M = K;
Kxx = zeros(1,(pu+1)*(pv+1)*(pw+1));
Kxy = Kxx; Kxz = Kxx;
Mxx = Kxx;

Kyy = Kxx; Kyx = Kxx; Kyz = Kxx;
Myy = Kxx;

Kzz = Kxx; Kzy = Kxx; Kzx = Kxx;
Mzz = Kzz;

for idx = 1:sz2
    [R, ~, d2Rdx2, ~, J, H] = CalculatePhysicalDerivatives(Model,CollocationPoints(idx,:));
    Kxx(1,:) = mi*((2+lambda)*d2Rdx2(1,1,1,:) + d2Rdx2(1,2,2,:) +d2Rdx2(1,3,3,:));
    Kxy(1,:) = (mi+lambda)*d2Rdx2(2,1,2,:);
    Kxz(1,:) = (mi+lambda)*d2Rdx2(3,1,3,:);
    Mxx(1,:) = RHO*R;
    
    Kyx(1,:) = (mi+lambda)*d2Rdx2(1,2,1,:);
    Kyy(1,:) = mi*((2+lambda)*d2Rdx2(2,2,2,:) +d2Rdx2(2,1,1,:) +d2Rdx2(2,3,3,:));
    Kyz(1,:) = (mi+lambda)*d2Rdx2(3,2,3,:);
    Myy(1,:) = RHO*R;

    
    Kzx(1,:) = (mi+lambda)*d2Rdx2(3,3,1,:);
    Kzy(1,:) = (mi+lambda)*d2Rdx2(3,3,2,:);
    Kzz(1,:) = mi*((2+lambda)*d2Rdx2(3,3,3,:) +d2Rdx2(3,2,2,:) +d2Rdx2(3,1,1,:));
    Mzz(1,:) = RHO*R;

    
    % Assembly
    su = FindSpanLinear(Model.nu,pu,CollocationPoints(idx,1),Model.U);
    sv = FindSpanLinear(Model.nv,pv,CollocationPoints(idx,2),Model.V);
    sw = FindSpanLinear(Model.nw,pw,CollocationPoints(idx,3),Model.W);
    

    i = 1;
    for kk=sw-pw+1:sw+1
        for jj=sv-pv+1:sv+1
            for ii=su-pu+1:su+1
                gidx(:,i) = ID(:,sub2ind(sz,ii,jj,kk));
                i=i+1;
            end
        end
    end
    K(3*(idx-1)+1,gidx(1,:)) = K(3*(idx-1)+1,gidx(1,:)) + Kxx;
    K(3*(idx-1)+1,gidx(2,:)) = K(3*(idx-1)+1,gidx(2,:)) + Kxy;
    K(3*(idx-1)+1,gidx(3,:)) = K(3*(idx-1)+1,gidx(3,:)) + Kxz;
    K(3*(idx-1)+2,gidx(1,:)) = K(3*(idx-1)+2,gidx(1,:)) + Kyx;
    K(3*(idx-1)+2,gidx(2,:)) = K(3*(idx-1)+2,gidx(2,:)) + Kyy;
    K(3*(idx-1)+2,gidx(3,:)) = K(3*(idx-1)+2,gidx(3,:)) + Kyz;
    K(3*(idx-1)+3,gidx(1,:)) = K(3*(idx-1)+3,gidx(1,:)) + Kzx;
    K(3*(idx-1)+3,gidx(2,:)) = K(3*(idx-1)+3,gidx(2,:)) + Kzy;
    K(3*(idx-1)+3,gidx(3,:)) = K(3*(idx-1)+3,gidx(3,:)) + Kzz;
    M(3*(idx-1)+1,gidx(1,:)) = M(3*(idx-1)+1,gidx(1,:)) + Mxx;
    M(3*(idx-1)+1,gidx(2,:)) = M(3*(idx-1)+1,gidx(2,:)) + Mxx;
    M(3*(idx-1)+1,gidx(3,:)) = M(3*(idx-1)+1,gidx(3,:)) + Mxx;
%     M(3*(idx-1)+2,gidx(:,2)) = M(3*(idx-1)+2,gidx(:,2)) + Mlocal(2,:);
%     M(3*(idx-1)+3,gidx(:,3)) = M(3*(idx-1)+3,gidx(:,3)) + Mlocal(3,:);

end
K = sparse(K);
M = sparse(M);
end